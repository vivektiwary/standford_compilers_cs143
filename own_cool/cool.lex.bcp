/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;

%%

%{

/*  Stuff enclosed in %{ %} is copied verbatim to the lexer class
 *  definition, all the extra variables/functions you want to use in the
 *  lexer actions should go here.  Don't remove or modify anything that
 *  was there initially.  */

    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    private int curr_lineno = 1;
    int get_curr_lineno() {
      return curr_lineno;
    }

    private AbstractSymbol filename;

    void set_filename(String fname) {
      filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
      return filename;
    }

    private boolean foundNullChar = false;
%}

%init{

/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */

    // empty for now
%init}

%eofval{

/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */

    switch(yy_lexical_state) {
        case YYINITIAL:
            /* nothing special to do in the initial state */
            break;
        case COMMENT:
            yybegin(YYINITIAL);
            return new Symbol(TokenConstants.ERROR, "EOF in comment");
        case STRING:
            yybegin(YYINITIAL);
            return new Symbol(TokenConstants.ERROR, "EOF in string constant");
    }
    return new Symbol(TokenConstants.EOF);
%eofval}

%class CoolLexer
%cup

%char
%state COMMENT
%state STRING
%state SINGLE_STRING


CLASS = "class"
DIGIT = [0-9]
IDENTIFIER = [a-zA-Z_]+[0-9]*[a-zA-Z_]*
SPACES = [\n\ \t\b\f\r\v\013]+

COMMENTS = [a-zA-Z_0-9 \t\n\-\.,'\(\)\[\]]*
ALL_WORDS = [a-zA-Z_0-9 \-\.,\(\)\[\]]*
SINGLE_COMMENT = [a-zA-Z_0-9 \t\n\-\.,'\(\)\[\]]
TYPEID = [A-Z]({IDENTIFIER})*

%%

<YYINITIAL>"=>"			{ /* Sample lexical rule for "=>" arrow.
                         Further lexical rules should be defined
                         here, after the last %% separator */
  return new Symbol(TokenConstants.DARROW); }

"(*" {
  yybegin(COMMENT);
}
<COMMENT>{COMMENTS} {}
<COMMENT>"*)" {
  yybegin(YYINITIAL);
}

<YYINITIAL>"*)" {
  return new Symbol(TokenConstants.ERROR, yytext());
}


<YYINITIAL>\" {
  string_buf.setLength(0);
  foundNullChar = false;
  yybegin(STRING);
}

<STRING> \x00 {
    foundNullChar = true;
}

<STRING> \\b {
    string_buf.append("\b");
}


<STRING> \\f {
    string_buf.append("\f");
}

<STRING> \\t {
    string_buf.append("\t");
}

<STRING> \\n {
    string_buf.append("\n");
}


<STRING> \\\n {
    string_buf.append("\n");
}

<STRING> \\\" {
    string_buf.append("\"");
}

<STRING> \\\\ {
    string_buf.append("\\");
}


<STRING> \\ {

}

<STRING> [^\"\0\n\\]+ {
    string_buf.append(yytext());
}

<STRING> \n {
    string_buf.setLength(0);
    foundNullChar = false;
    yybegin(YYINITIAL);
    return new Symbol(TokenConstants.ERROR, "Unterminated string constant");
}

<STRING> \" {
    yybegin(YYINITIAL);
    String s = string_buf.toString();
    if (foundNullChar) {
        return new Symbol(TokenConstants.ERROR, "String contains null character");
    } else if (s.length() >= MAX_STR_CONST) {
        return new Symbol(TokenConstants.ERROR, "String constant too long");
    } else {
        return new Symbol(TokenConstants.STR_CONST, 
            new StringSymbol(s, s.length(), s.hashCode()));
    }
}

{CLASS} {
  return new Symbol(TokenConstants.CLASS); 
}

"else" {
  return new Symbol(TokenConstants.ELSE);
}
"fi"  {
  return new Symbol(TokenConstants.FI);
}
"if"  {
  return new Symbol(TokenConstants.IF);
}
"in" {
  return new Symbol(TokenConstants.IN);
}
"inherits" {
  return new Symbol(TokenConstants.INHERITS);
}
"isvoid" {
  return new Symbol(TokenConstants.ISVOID);
}
"let" {
  return new Symbol(TokenConstants.LET);
}
"loop" {
  return new Symbol(TokenConstants.LOOP);
}
"pool" {
  return new Symbol(TokenConstants.POOL);
}
"then" {
  return new Symbol(TokenConstants.THEN);
}
"while" {
  return new Symbol(TokenConstants.WHILE);
}
"case" {
  return new Symbol(TokenConstants.CASE);
}
"esac" {
  return new Symbol(TokenConstants.ESAC);
}
"of" {
  return new Symbol(TokenConstants.OF);
}
"new" {
  return new Symbol(TokenConstants.NEW);
}
"not" {
  return new Symbol(TokenConstants.NOT);
}


<YYINITIAL> "/" {
  return new Symbol(TokenConstants.DIV);
}
<YYINITIAL> "*" {
  return new Symbol(TokenConstants.MULT);
}
<YYINITIAL> "+" {
  return new Symbol(TokenConstants.PLUS);
}
<YYINITIAL> "-" {
  return new Symbol(TokenConstants.MINUS);
}
<YYINITIAL> "~" {
  return new Symbol(TokenConstants.NEG);
}
<YYINITIAL> "<" {
  return new Symbol(TokenConstants.LT);
}
<YYINITIAL> "<=" {
  return new Symbol(TokenConstants.LE);
}
<YYINITIAL> "<-" {
  return new Symbol(TokenConstants.ASSIGN);
}
<YYINITIAL> \{    {
  return new Symbol(TokenConstants.LBRACE);
}
<YYINITIAL> \} {
  return new Symbol(TokenConstants.RBRACE);
}
<YYINITIAL> "@" {
  return new Symbol(TokenConstants.AT);
}
\(    {
  return new Symbol(TokenConstants.LPAREN);
}
\) {
  return new Symbol(TokenConstants.RPAREN);
}
";" {
  return new Symbol(TokenConstants.SEMI);
}
":" {
  return new Symbol(TokenConstants.COLON);
}
"=" {
  return new Symbol(TokenConstants.EQ);
}
"." {
  return new Symbol(TokenConstants.DOT);
}
"," {
  return new Symbol(TokenConstants.COMMA);
}

"\n" {
  curr_lineno++;
}

{SPACES}  {}

"false" {
  return new Symbol(TokenConstants.BOOL_CONST, "false");
}
"true" {
  return new Symbol(TokenConstants.BOOL_CONST, "true");
}
{TYPEID}    {
  return new Symbol(TokenConstants.TYPEID, new StringSymbol(yytext(), yytext().length(), yytext().hashCode())); 
            }
{IDENTIFIER}    {
  return new Symbol(TokenConstants.OBJECTID, new StringSymbol(yytext(), yytext().length(), yytext().hashCode())); 
                }
{DIGIT}+ {
  return new Symbol(TokenConstants.INT_CONST, new IntSymbol(yytext(), yytext().length(), yytext().hashCode())); 
         }


.                               { /* This rule should be the very last
                                     in your lexical specification and
                                     will match match everything not
                                     matched by other lexical rules. */
  return new Symbol(TokenConstants.ERROR, yytext());
}
